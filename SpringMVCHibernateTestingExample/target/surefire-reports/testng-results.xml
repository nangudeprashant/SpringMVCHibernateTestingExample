<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="6" failed="0" total="23" passed="17">
  <reporter-output>
  </reporter-output>
  <suite name="Command line suite" duration-ms="2546" started-at="2020-02-20T08:51:44Z" finished-at="2020-02-20T08:51:47Z">
    <groups>
    </groups>
    <test name="Command line test" duration-ms="2546" started-at="2020-02-20T08:51:44Z" finished-at="2020-02-20T08:51:47Z">
      <class name="com.javaLive.springmvc.dao.EmployeeDaoImplTest">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.javaLive.springmvc.dao.EmployeeDaoImplTest@27f723]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2020-02-20T14:21:45Z" finished-at="2020-02-20T14:21:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="FAIL" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.javaLive.springmvc.dao.EmployeeDaoImplTest@27f723]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="0" started-at="2020-02-20T14:21:45Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2020-02-20T14:21:45Z">
          <exception class="java.lang.IllegalStateException">
            <message>
              <![CDATA[Failed to load ApplicationContext]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalStateException: Failed to load ApplicationContext
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:124)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:83)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:117)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:230)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextPrepareTestInstance(AbstractTestNGSpringContextTests.java:149)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeConfigurationMethod(Invoker.java:517)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:213)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:140)
	at org.testng.internal.TestMethodWorker.invokeBeforeClassMethods(TestMethodWorker.java:170)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:104)
	at org.testng.TestRunner.privateRun(TestRunner.java:771)
	at org.testng.TestRunner.run(TestRunner.java:621)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:357)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310)
	at org.testng.SuiteRunner.run(SuiteRunner.java:259)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1199)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1124)
	at org.testng.TestNG.run(TestNG.java:1032)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:77)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:159)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:99)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:106)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'employeeDao': Unsatisfied dependency expressed through field 'sessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sessionFactory' defined in com.javaLive.springmvc.configuration.HibernateTestConfiguration: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.orm.hibernate4.LocalSessionFactoryBean]: Factory method 'sessionFactory' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in com.javaLive.springmvc.configuration.HibernateTestConfiguration: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.sql.DataSource]: Factory method 'dataSource' threw exception; nested exception is java.lang.IllegalStateException: Required key 'jdbc.driverClassName' not found
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:588)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:366)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1272)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:553)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:312)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:308)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:761)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:867)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:543)
	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:128)
	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:60)
	at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.delegateLoading(AbstractDelegatingSmartContextLoader.java:106)
	at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.loadContext(AbstractDelegatingSmartContextLoader.java:249)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:98)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:116)
	... 39 more
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sessionFactory' defined in com.javaLive.springmvc.configuration.HibernateTestConfiguration: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.orm.hibernate4.LocalSessionFactoryBean]: Factory method 'sessionFactory' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in com.javaLive.springmvc.configuration.HibernateTestConfiguration: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.sql.DataSource]: Factory method 'dataSource' threw exception; nested exception is java.lang.IllegalStateException: Required key 'jdbc.driverClassName' not found
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1181)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1075)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:513)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:312)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:308)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:208)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1138)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1066)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:585)
	... 57 more
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.orm.hibernate4.LocalSessionFactoryBean]: Factory method 'sessionFactory' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in com.javaLive.springmvc.configuration.HibernateTestConfiguration: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.sql.DataSource]: Factory method 'dataSource' threw exception; nested exception is java.lang.IllegalStateException: Required key 'jdbc.driverClassName' not found
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:189)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588)
	... 69 more
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in com.javaLive.springmvc.configuration.HibernateTestConfiguration: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.sql.DataSource]: Factory method 'dataSource' threw exception; nested exception is java.lang.IllegalStateException: Required key 'jdbc.driverClassName' not found
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1181)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1075)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:513)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:312)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:308)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.obtainBeanInstanceFromFactory(ConfigurationClassEnhancer.java:389)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:361)
	at com.javaLive.springmvc.configuration.HibernateTestConfiguration$$EnhancerBySpringCGLIB$$af805302.dataSource(<generated>)
	at com.javaLive.springmvc.configuration.HibernateTestConfiguration.sessionFactory(HibernateTestConfiguration.java:35)
	at com.javaLive.springmvc.configuration.HibernateTestConfiguration$$EnhancerBySpringCGLIB$$af805302.CGLIB$sessionFactory$2(<generated>)
	at com.javaLive.springmvc.configuration.HibernateTestConfiguration$$EnhancerBySpringCGLIB$$af805302$$FastClassBySpringCGLIB$$cdd37e18.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:358)
	at com.javaLive.springmvc.configuration.HibernateTestConfiguration$$EnhancerBySpringCGLIB$$af805302.sessionFactory(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162)
	... 70 more
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.sql.DataSource]: Factory method 'dataSource' threw exception; nested exception is java.lang.IllegalStateException: Required key 'jdbc.driverClassName' not found
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:189)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588)
	... 92 more
Caused by: java.lang.IllegalStateException: Required key 'jdbc.driverClassName' not found
	at org.springframework.core.env.AbstractPropertyResolver.getRequiredProperty(AbstractPropertyResolver.java:183)
	at org.springframework.core.env.AbstractEnvironment.getRequiredProperty(AbstractEnvironment.java:553)
	at com.javaLive.springmvc.configuration.HibernateTestConfiguration.dataSource(HibernateTestConfiguration.java:44)
	at com.javaLive.springmvc.configuration.HibernateTestConfiguration$$EnhancerBySpringCGLIB$$af805302.CGLIB$dataSource$0(<generated>)
	at com.javaLive.springmvc.configuration.HibernateTestConfiguration$$EnhancerBySpringCGLIB$$af805302$$FastClassBySpringCGLIB$$cdd37e18.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:358)
	at com.javaLive.springmvc.configuration.HibernateTestConfiguration$$EnhancerBySpringCGLIB$$af805302.dataSource(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162)
	... 93 more
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalStateException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="SKIP" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.javaLive.springmvc.dao.EmployeeDaoImplTest@27f723]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-02-20T14:21:47Z" finished-at="2020-02-20T14:21:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="SKIP" signature="deleteEmployeeByInvalidSsn()[pri:0, instance:com.javaLive.springmvc.dao.EmployeeDaoImplTest@27f723]" name="deleteEmployeeByInvalidSsn" duration-ms="0" started-at="2020-02-20T14:21:47Z" finished-at="2020-02-20T14:21:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteEmployeeByInvalidSsn -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.javaLive.springmvc.dao.EmployeeDaoImplTest@27f723]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="8" started-at="2020-02-20T14:21:47Z" finished-at="2020-02-20T14:21:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.javaLive.springmvc.dao.EmployeeDaoImplTest.deleteEmployeeByInvalidSsn()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="SKIP" signature="setUp()[pri:0, instance:com.javaLive.springmvc.dao.EmployeeDaoImplTest@27f723]" name="setUp" is-config="true" duration-ms="0" started-at="2020-02-20T14:21:47Z" finished-at="2020-02-20T14:21:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="SKIP" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.javaLive.springmvc.dao.EmployeeDaoImplTest@27f723]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-02-20T14:21:47Z" finished-at="2020-02-20T14:21:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="SKIP" signature="setUp()[pri:0, instance:com.javaLive.springmvc.dao.EmployeeDaoImplTest@27f723]" name="setUp" is-config="true" duration-ms="0" started-at="2020-02-20T14:21:47Z" finished-at="2020-02-20T14:21:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="SKIP" signature="deleteEmployeeBySsn()[pri:0, instance:com.javaLive.springmvc.dao.EmployeeDaoImplTest@27f723]" name="deleteEmployeeBySsn" duration-ms="0" started-at="2020-02-20T14:21:47Z" finished-at="2020-02-20T14:21:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteEmployeeBySsn -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.javaLive.springmvc.dao.EmployeeDaoImplTest@27f723]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="4" started-at="2020-02-20T14:21:47Z" finished-at="2020-02-20T14:21:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.javaLive.springmvc.dao.EmployeeDaoImplTest.deleteEmployeeBySsn()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="SKIP" signature="setUp()[pri:0, instance:com.javaLive.springmvc.dao.EmployeeDaoImplTest@27f723]" name="setUp" is-config="true" duration-ms="0" started-at="2020-02-20T14:21:47Z" finished-at="2020-02-20T14:21:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="SKIP" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.javaLive.springmvc.dao.EmployeeDaoImplTest@27f723]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-02-20T14:21:47Z" finished-at="2020-02-20T14:21:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="SKIP" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.javaLive.springmvc.dao.EmployeeDaoImplTest@27f723]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-02-20T14:21:47Z" finished-at="2020-02-20T14:21:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.javaLive.springmvc.dao.EmployeeDaoImplTest@27f723]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-02-20T14:21:47Z" finished-at="2020-02-20T14:21:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.javaLive.springmvc.dao.EmployeeDaoImplTest.findAllEmployees()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="SKIP" signature="findAllEmployees()[pri:0, instance:com.javaLive.springmvc.dao.EmployeeDaoImplTest@27f723]" name="findAllEmployees" duration-ms="0" started-at="2020-02-20T14:21:47Z" finished-at="2020-02-20T14:21:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- findAllEmployees -->
        <test-method status="SKIP" signature="findById()[pri:0, instance:com.javaLive.springmvc.dao.EmployeeDaoImplTest@27f723]" name="findById" duration-ms="4" started-at="2020-02-20T14:21:47Z" finished-at="2020-02-20T14:21:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- findById -->
        <test-method status="SKIP" signature="setUp()[pri:0, instance:com.javaLive.springmvc.dao.EmployeeDaoImplTest@27f723]" name="setUp" is-config="true" duration-ms="0" started-at="2020-02-20T14:21:47Z" finished-at="2020-02-20T14:21:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="SKIP" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.javaLive.springmvc.dao.EmployeeDaoImplTest@27f723]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-02-20T14:21:47Z" finished-at="2020-02-20T14:21:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="SKIP" signature="setUp()[pri:0, instance:com.javaLive.springmvc.dao.EmployeeDaoImplTest@27f723]" name="setUp" is-config="true" duration-ms="0" started-at="2020-02-20T14:21:47Z" finished-at="2020-02-20T14:21:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.javaLive.springmvc.dao.EmployeeDaoImplTest@27f723]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-02-20T14:21:47Z" finished-at="2020-02-20T14:21:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.javaLive.springmvc.dao.EmployeeDaoImplTest.findById()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="SKIP" signature="findEmployeeBySsn()[pri:0, instance:com.javaLive.springmvc.dao.EmployeeDaoImplTest@27f723]" name="findEmployeeBySsn" duration-ms="4" started-at="2020-02-20T14:21:47Z" finished-at="2020-02-20T14:21:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- findEmployeeBySsn -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.javaLive.springmvc.dao.EmployeeDaoImplTest@27f723]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="4" started-at="2020-02-20T14:21:47Z" finished-at="2020-02-20T14:21:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.javaLive.springmvc.dao.EmployeeDaoImplTest.findEmployeeBySsn()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="SKIP" signature="saveEmployee()[pri:0, instance:com.javaLive.springmvc.dao.EmployeeDaoImplTest@27f723]" name="saveEmployee" duration-ms="0" started-at="2020-02-20T14:21:47Z" finished-at="2020-02-20T14:21:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.javaLive.springmvc.dao.EmployeeDaoImplTest@27f723]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="4" started-at="2020-02-20T14:21:47Z" finished-at="2020-02-20T14:21:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.javaLive.springmvc.dao.EmployeeDaoImplTest.saveEmployee()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="SKIP" signature="setUp()[pri:0, instance:com.javaLive.springmvc.dao.EmployeeDaoImplTest@27f723]" name="setUp" is-config="true" duration-ms="0" started-at="2020-02-20T14:21:47Z" finished-at="2020-02-20T14:21:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="SKIP" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.javaLive.springmvc.dao.EmployeeDaoImplTest@27f723]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-02-20T14:21:47Z" finished-at="2020-02-20T14:21:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.javaLive.springmvc.dao.EmployeeDaoImplTest@27f723]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2020-02-20T14:21:47Z" finished-at="2020-02-20T14:21:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.javaLive.springmvc.dao.EmployeeDaoImplTest -->
      <class name="com.javaLive.springmvc.service.EmployeeServiceImplTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.javaLive.springmvc.service.EmployeeServiceImplTest@5bfbf16f]" name="setUp" is-config="true" duration-ms="28" started-at="2020-02-20T14:21:47Z" finished-at="2020-02-20T14:21:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="deleteEmployeeBySsn()[pri:0, instance:com.javaLive.springmvc.service.EmployeeServiceImplTest@5bfbf16f]" name="deleteEmployeeBySsn" duration-ms="4" started-at="2020-02-20T14:21:47Z" finished-at="2020-02-20T14:21:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteEmployeeBySsn -->
        <test-method status="PASS" signature="findAllEmployees()[pri:0, instance:com.javaLive.springmvc.service.EmployeeServiceImplTest@5bfbf16f]" name="findAllEmployees" duration-ms="0" started-at="2020-02-20T14:21:47Z" finished-at="2020-02-20T14:21:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- findAllEmployees -->
        <test-method status="PASS" signature="findById()[pri:0, instance:com.javaLive.springmvc.service.EmployeeServiceImplTest@5bfbf16f]" name="findById" duration-ms="4" started-at="2020-02-20T14:21:47Z" finished-at="2020-02-20T14:21:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- findById -->
        <test-method status="PASS" signature="findEmployeeBySsn()[pri:0, instance:com.javaLive.springmvc.service.EmployeeServiceImplTest@5bfbf16f]" name="findEmployeeBySsn" duration-ms="4" started-at="2020-02-20T14:21:47Z" finished-at="2020-02-20T14:21:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- findEmployeeBySsn -->
        <test-method status="PASS" signature="isEmployeeSsnUnique()[pri:0, instance:com.javaLive.springmvc.service.EmployeeServiceImplTest@5bfbf16f]" name="isEmployeeSsnUnique" duration-ms="4" started-at="2020-02-20T14:21:47Z" finished-at="2020-02-20T14:21:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isEmployeeSsnUnique -->
        <test-method status="PASS" signature="saveEmployee()[pri:0, instance:com.javaLive.springmvc.service.EmployeeServiceImplTest@5bfbf16f]" name="saveEmployee" duration-ms="8" started-at="2020-02-20T14:21:47Z" finished-at="2020-02-20T14:21:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="updateEmployee()[pri:0, instance:com.javaLive.springmvc.service.EmployeeServiceImplTest@5bfbf16f]" name="updateEmployee" duration-ms="0" started-at="2020-02-20T14:21:47Z" finished-at="2020-02-20T14:21:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateEmployee -->
      </class> <!-- com.javaLive.springmvc.service.EmployeeServiceImplTest -->
      <class name="com.javaLive.springmvc.controller.AppControllerTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.javaLive.springmvc.controller.AppControllerTest@687080dc]" name="setUp" is-config="true" duration-ms="848" started-at="2020-02-20T14:21:44Z" finished-at="2020-02-20T14:21:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="deleteEmployee()[pri:0, instance:com.javaLive.springmvc.controller.AppControllerTest@687080dc]" name="deleteEmployee" duration-ms="31" started-at="2020-02-20T14:21:45Z" finished-at="2020-02-20T14:21:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteEmployee -->
        <test-method status="PASS" signature="editEmployee()[pri:0, instance:com.javaLive.springmvc.controller.AppControllerTest@687080dc]" name="editEmployee" duration-ms="78" started-at="2020-02-20T14:21:45Z" finished-at="2020-02-20T14:21:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- editEmployee -->
        <test-method status="PASS" signature="listEmployees()[pri:0, instance:com.javaLive.springmvc.controller.AppControllerTest@687080dc]" name="listEmployees" duration-ms="31" started-at="2020-02-20T14:21:45Z" finished-at="2020-02-20T14:21:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- listEmployees -->
        <test-method status="PASS" signature="saveEmployeeWithSuccess()[pri:0, instance:com.javaLive.springmvc.controller.AppControllerTest@687080dc]" name="saveEmployeeWithSuccess" duration-ms="0" started-at="2020-02-20T14:21:45Z" finished-at="2020-02-20T14:21:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployeeWithSuccess -->
        <test-method status="PASS" signature="saveEmployeeWithValidationErrorNonUniqueSSN()[pri:0, instance:com.javaLive.springmvc.controller.AppControllerTest@687080dc]" name="saveEmployeeWithValidationErrorNonUniqueSSN" duration-ms="0" started-at="2020-02-20T14:21:45Z" finished-at="2020-02-20T14:21:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployeeWithValidationErrorNonUniqueSSN -->
        <test-method status="PASS" signature="newEmployee()[pri:0, instance:com.javaLive.springmvc.controller.AppControllerTest@687080dc]" name="newEmployee" duration-ms="0" started-at="2020-02-20T14:21:45Z" finished-at="2020-02-20T14:21:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- newEmployee -->
        <test-method status="PASS" signature="saveEmployeeWithValidationError()[pri:0, instance:com.javaLive.springmvc.controller.AppControllerTest@687080dc]" name="saveEmployeeWithValidationError" duration-ms="0" started-at="2020-02-20T14:21:45Z" finished-at="2020-02-20T14:21:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployeeWithValidationError -->
        <test-method status="PASS" signature="updateEmployeeWithValidationError()[pri:0, instance:com.javaLive.springmvc.controller.AppControllerTest@687080dc]" name="updateEmployeeWithValidationError" duration-ms="0" started-at="2020-02-20T14:21:45Z" finished-at="2020-02-20T14:21:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateEmployeeWithValidationError -->
        <test-method status="PASS" signature="updateEmployeeWithValidationErrorNonUniqueSSN()[pri:0, instance:com.javaLive.springmvc.controller.AppControllerTest@687080dc]" name="updateEmployeeWithValidationErrorNonUniqueSSN" duration-ms="0" started-at="2020-02-20T14:21:45Z" finished-at="2020-02-20T14:21:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateEmployeeWithValidationErrorNonUniqueSSN -->
        <test-method status="PASS" signature="updateEmployeeWithSuccess()[pri:0, instance:com.javaLive.springmvc.controller.AppControllerTest@687080dc]" name="updateEmployeeWithSuccess" duration-ms="0" started-at="2020-02-20T14:21:45Z" finished-at="2020-02-20T14:21:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateEmployeeWithSuccess -->
      </class> <!-- com.javaLive.springmvc.controller.AppControllerTest -->
    </test> <!-- Command line test -->
  </suite> <!-- Command line suite -->
</testng-results>
